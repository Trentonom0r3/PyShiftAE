// Include the header file for linking with Python.
#include "PyLink.h"

PYBIND11_EMBEDDED_MODULE(PyShiftCore, m) {
    bindLayer(m);
    bindItem(m);
    bindCompItem(m);
    bindFootageItem(m);
    bindFolderItem(m);
    bindProject(m);
    bindApp(m);
    //bind the LayerFlag enum
    bindLayerEnum(m);
}

// Function to initialize the embedded Python interpreter and import the PyShiftCore module.
void initialize_python_module() {
    try {
        // Initialize the Python interpreter.
        py::initialize_interpreter();
    }
    catch (const py::error_already_set& e) {
        // Handle any exceptions thrown by pybind11.
        std::cerr << "Python exception: " << e.what() << std::endl;
    }
    catch (const std::exception& e) {
        // Handle any standard C++ exceptions.
        std::cerr << "Standard exception: " << e.what() << std::endl;
    }
    catch (...) {
        // Catch all other exceptions.
        std::cerr << "Unknown exception occurred" << std::endl;
    }
}

// Function to execute a provided Python script.
std::string execute_python_script(const std::string& script) {
    // Variable to hold the output of the script.
    std::string output;
    try {
        // Run some Python code to redirect stdout and stderr to a string stream.
        // This will capture any print statements or errors generated by the script.
        py::exec(
            "import sys\n"
            "from io import StringIO\n"
            "# Backup stdout and stderr\n"
            "_stdout, _stderr = sys.stdout, sys.stderr\n"
            "# Redirect stdout and stderr to a string stream\n"
            "sys.stdout, sys.stderr = StringIO(), StringIO()\n"
        );
        // Execute the provided Python script.
        py::exec(script);
        // Run some more Python code to get the output and restore stdout and stderr.
        py::exec(
            "# Get the output and restore stdout and stderr\n"
            "output = sys.stdout.getvalue() + sys.stderr.getvalue()\n"
            "sys.stdout, sys.stderr = _stdout, _stderr\n"
        );
        // Get the 'output' variable from the Python global namespace and cast it to a std::string.
        output = py::globals()["output"].cast<std::string>();
    }
    catch (const py::error_already_set& e) {
        // Handle any exceptions thrown by pybind11.
        std::cerr << "Python exception: " << e.what() << std::endl;
        output = "Python exception: " + std::string(e.what());
    }
    catch (const std::exception& e) {
        // Handle any standard C++ exceptions.
        std::cerr << "Standard exception: " << e.what() << std::endl;
        output = "Standard exception: " + std::string(e.what());
    }
    catch (...) {
        // Catch all other exceptions.
        std::cerr << "Unknown exception occurred" << std::endl;
        output = "Unknown exception occurred";
    }
    // Return the output.
    return output;
}

// Function to execute a Python script from a file.
std::string execute_python_script_from_file(const std::string& scriptPath) {
    // Open the script file.
    std::ifstream scriptFile(scriptPath);
    if (!scriptFile) {
        // Handle error if the file could not be opened.
        std::cerr << "Failed to open script file: " << scriptPath << std::endl;
    }
    // Read the script from the file.
    std::string script((std::istreambuf_iterator<char>(scriptFile)),
        std::istreambuf_iterator<char>());
    // Execute the script using the existing execute_python_script function.
    return execute_python_script(script);
}

// Function to finalize the embedded Python interpreter.
void finalize() {
    // Finalize the Python interpreter.
    // This will clean up any resources used by Python.
    py::finalize_interpreter();
}
